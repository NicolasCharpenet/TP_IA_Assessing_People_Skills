// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.2102.1701 at 02:37 on vendredi 26 novembre 2021.
	/// </remarks>
	public partial class Model14_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_isCorrect_numPeople_numQuestions has executed. Set this to false to force re-execution of Changed_isCorrect_numPeople_numQuestions</summary>
		public bool Changed_isCorrect_numPeople_numQuestions_isDone;
		/// <summary>True if Changed_numPeople_numSkills_skill has executed. Set this to false to force re-execution of Changed_numPeople_numSkills_skill</summary>
		public bool Changed_numPeople_numSkills_skill_isDone;
		/// <summary>True if Changed_numQuestions_probGuess has executed. Set this to false to force re-execution of Changed_numQuestions_probGuess</summary>
		public bool Changed_numQuestions_probGuess_isDone;
		/// <summary>True if Changed_numQuestions_probNoMistake has executed. Set this to false to force re-execution of Changed_numQuestions_probNoMistake</summary>
		public bool Changed_numQuestions_probNoMistake_isDone;
		/// <summary>True if Changed_numSkills_probSkillTrue has executed. Set this to false to force re-execution of Changed_numSkills_probSkillTrue</summary>
		public bool Changed_numSkills_probSkillTrue_isDone;
		/// <summary>Field backing the isCorrect property</summary>
		private bool[][] IsCorrect;
		/// <summary>Message to marginal of 'isCorrect'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> isCorrect_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the numPeople property</summary>
		private int NumPeople;
		/// <summary>Field backing the numQuestions property</summary>
		private int NumQuestions;
		/// <summary>Field backing the numSkills property</summary>
		private int NumSkills;
		/// <summary>Field backing the numSkillsForQuestions property</summary>
		private int[] NumSkillsForQuestions;
		/// <summary>Field backing the probGuess property</summary>
		private double[] ProbGuess;
		/// <summary>Message to marginal of 'probGuess'</summary>
		public DistributionStructArray<Gaussian,double> probGuess_marginal_F;
		/// <summary>Field backing the probNoMistake property</summary>
		private double[] ProbNoMistake;
		/// <summary>Message to marginal of 'probNoMistake'</summary>
		public DistributionStructArray<Gaussian,double> probNoMistake_marginal_F;
		/// <summary>Field backing the probSkillTrue property</summary>
		private double[] ProbSkillTrue;
		/// <summary>Message to marginal of 'probSkillTrue'</summary>
		public DistributionStructArray<Gaussian,double> probSkillTrue_marginal_F;
		/// <summary>Field backing the skill property</summary>
		private bool[][] Skill;
		/// <summary>Message to marginal of 'skill'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> skill_marginal_F;
		/// <summary>Field backing the skillsNeeded property</summary>
		private int[][] SkillsNeeded;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'isCorrect'</summary>
		public bool[][] isCorrect
		{
			get {
				return this.IsCorrect;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumPeople)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumPeople)+" was expected for variable \'isCorrect\'");
				}
				this.IsCorrect = value;
				this.numberOfIterationsDone = 0;
				this.Changed_isCorrect_numPeople_numQuestions_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'numPeople'</summary>
		public int numPeople
		{
			get {
				return this.NumPeople;
			}
			set {
				if (this.NumPeople!=value) {
					this.NumPeople = value;
					this.numberOfIterationsDone = 0;
					this.Changed_isCorrect_numPeople_numQuestions_isDone = false;
					this.Changed_numPeople_numSkills_skill_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'numQuestions'</summary>
		public int numQuestions
		{
			get {
				return this.NumQuestions;
			}
			set {
				if (this.NumQuestions!=value) {
					this.NumQuestions = value;
					this.numberOfIterationsDone = 0;
					this.Changed_isCorrect_numPeople_numQuestions_isDone = false;
					this.Changed_numQuestions_probNoMistake_isDone = false;
					this.Changed_numQuestions_probGuess_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'numSkills'</summary>
		public int numSkills
		{
			get {
				return this.NumSkills;
			}
			set {
				if (this.NumSkills!=value) {
					this.NumSkills = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numPeople_numSkills_skill_isDone = false;
					this.Changed_numSkills_probSkillTrue_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'numSkillsForQuestions'</summary>
		public int[] numSkillsForQuestions
		{
			get {
				return this.NumSkillsForQuestions;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumQuestions)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumQuestions)+" was expected for variable \'numSkillsForQuestions\'");
				}
				this.NumSkillsForQuestions = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'probGuess'</summary>
		public double[] probGuess
		{
			get {
				return this.ProbGuess;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumQuestions)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumQuestions)+" was expected for variable \'probGuess\'");
				}
				this.ProbGuess = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numQuestions_probGuess_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'probNoMistake'</summary>
		public double[] probNoMistake
		{
			get {
				return this.ProbNoMistake;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumQuestions)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumQuestions)+" was expected for variable \'probNoMistake\'");
				}
				this.ProbNoMistake = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numQuestions_probNoMistake_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'probSkillTrue'</summary>
		public double[] probSkillTrue
		{
			get {
				return this.ProbSkillTrue;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumSkills)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumSkills)+" was expected for variable \'probSkillTrue\'");
				}
				this.ProbSkillTrue = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numSkills_probSkillTrue_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'skill'</summary>
		public bool[][] skill
		{
			get {
				return this.Skill;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumPeople)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumPeople)+" was expected for variable \'skill\'");
				}
				this.Skill = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numPeople_numSkills_skill_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'skillsNeeded'</summary>
		public int[][] skillsNeeded
		{
			get {
				return this.SkillsNeeded;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumQuestions)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumQuestions)+" was expected for variable \'skillsNeeded\'");
				}
				this.SkillsNeeded = value;
				this.numberOfIterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of isCorrect and numPeople and numQuestions</summary>
		private void Changed_isCorrect_numPeople_numQuestions()
		{
			if (this.Changed_isCorrect_numPeople_numQuestions_isDone) {
				return ;
			}
			// Create array for 'isCorrect_marginal' Forwards messages.
			this.isCorrect_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumPeople);
			for(int people = 0; people<this.NumPeople; people++) {
				// Create array for 'isCorrect_marginal' Forwards messages.
				this.isCorrect_marginal_F[people] = new DistributionStructArray<Bernoulli,bool>(this.NumQuestions);
				for(int questions = 0; questions<this.NumQuestions; questions++) {
					this.isCorrect_marginal_F[people][questions] = Bernoulli.Uniform();
				}
			}
			// Message to 'isCorrect_marginal' from DerivedVariable factor
			this.isCorrect_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.IsCorrect, this.isCorrect_marginal_F);
			this.Changed_isCorrect_numPeople_numQuestions_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numPeople and numSkills and skill</summary>
		private void Changed_numPeople_numSkills_skill()
		{
			if (this.Changed_numPeople_numSkills_skill_isDone) {
				return ;
			}
			// Create array for 'skill_marginal' Forwards messages.
			this.skill_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumPeople);
			for(int people = 0; people<this.NumPeople; people++) {
				// Create array for 'skill_marginal' Forwards messages.
				this.skill_marginal_F[people] = new DistributionStructArray<Bernoulli,bool>(this.NumSkills);
				for(int skills = 0; skills<this.NumSkills; skills++) {
					this.skill_marginal_F[people][skills] = Bernoulli.Uniform();
				}
			}
			// Message to 'skill_marginal' from DerivedVariable factor
			this.skill_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.Skill, this.skill_marginal_F);
			this.Changed_numPeople_numSkills_skill_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numQuestions and probGuess</summary>
		private void Changed_numQuestions_probGuess()
		{
			if (this.Changed_numQuestions_probGuess_isDone) {
				return ;
			}
			// Create array for 'probGuess_marginal' Forwards messages.
			this.probGuess_marginal_F = new DistributionStructArray<Gaussian,double>(this.NumQuestions);
			for(int questions = 0; questions<this.NumQuestions; questions++) {
				this.probGuess_marginal_F[questions] = Gaussian.Uniform();
			}
			// Message to 'probGuess_marginal' from DerivedVariable factor
			this.probGuess_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.ProbGuess, this.probGuess_marginal_F);
			this.Changed_numQuestions_probGuess_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numQuestions and probNoMistake</summary>
		private void Changed_numQuestions_probNoMistake()
		{
			if (this.Changed_numQuestions_probNoMistake_isDone) {
				return ;
			}
			// Create array for 'probNoMistake_marginal' Forwards messages.
			this.probNoMistake_marginal_F = new DistributionStructArray<Gaussian,double>(this.NumQuestions);
			for(int questions = 0; questions<this.NumQuestions; questions++) {
				this.probNoMistake_marginal_F[questions] = Gaussian.Uniform();
			}
			// Message to 'probNoMistake_marginal' from DerivedVariable factor
			this.probNoMistake_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.ProbNoMistake, this.probNoMistake_marginal_F);
			this.Changed_numQuestions_probNoMistake_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numSkills and probSkillTrue</summary>
		private void Changed_numSkills_probSkillTrue()
		{
			if (this.Changed_numSkills_probSkillTrue_isDone) {
				return ;
			}
			// Create array for 'probSkillTrue_marginal' Forwards messages.
			this.probSkillTrue_marginal_F = new DistributionStructArray<Gaussian,double>(this.NumSkills);
			for(int skills = 0; skills<this.NumSkills; skills++) {
				this.probSkillTrue_marginal_F[skills] = Gaussian.Uniform();
			}
			// Message to 'probSkillTrue_marginal' from DerivedVariable factor
			this.probSkillTrue_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,double[]>(this.ProbSkillTrue, this.probSkillTrue_marginal_F);
			this.Changed_numSkills_probSkillTrue_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_isCorrect_numPeople_numQuestions();
			this.Changed_numPeople_numSkills_skill();
			this.Changed_numSkills_probSkillTrue();
			this.Changed_numQuestions_probNoMistake();
			this.Changed_numQuestions_probGuess();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="numPeople") {
				return this.numPeople;
			}
			if (variableName=="numSkills") {
				return this.numSkills;
			}
			if (variableName=="numQuestions") {
				return this.numQuestions;
			}
			if (variableName=="probGuess") {
				return this.probGuess;
			}
			if (variableName=="probNoMistake") {
				return this.probNoMistake;
			}
			if (variableName=="probSkillTrue") {
				return this.probSkillTrue;
			}
			if (variableName=="numSkillsForQuestions") {
				return this.numSkillsForQuestions;
			}
			if (variableName=="skillsNeeded") {
				return this.skillsNeeded;
			}
			if (variableName=="skill") {
				return this.skill;
			}
			if (variableName=="isCorrect") {
				return this.isCorrect;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'isCorrect' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> IsCorrectMarginal()
		{
			return this.isCorrect_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="isCorrect") {
				return this.IsCorrectMarginal();
			}
			if (variableName=="skill") {
				return this.SkillMarginal();
			}
			if (variableName=="probSkillTrue") {
				return this.ProbSkillTrueMarginal();
			}
			if (variableName=="probNoMistake") {
				return this.ProbNoMistakeMarginal();
			}
			if (variableName=="probGuess") {
				return this.ProbGuessMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'probGuess' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ProbGuessMarginal()
		{
			return this.probGuess_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'probNoMistake' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ProbNoMistakeMarginal()
		{
			return this.probNoMistake_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'probSkillTrue' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ProbSkillTrueMarginal()
		{
			return this.probSkillTrue_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="numPeople") {
				this.numPeople = (int)value;
				return ;
			}
			if (variableName=="numSkills") {
				this.numSkills = (int)value;
				return ;
			}
			if (variableName=="numQuestions") {
				this.numQuestions = (int)value;
				return ;
			}
			if (variableName=="probGuess") {
				this.probGuess = (double[])value;
				return ;
			}
			if (variableName=="probNoMistake") {
				this.probNoMistake = (double[])value;
				return ;
			}
			if (variableName=="probSkillTrue") {
				this.probSkillTrue = (double[])value;
				return ;
			}
			if (variableName=="numSkillsForQuestions") {
				this.numSkillsForQuestions = (int[])value;
				return ;
			}
			if (variableName=="skillsNeeded") {
				this.skillsNeeded = (int[][])value;
				return ;
			}
			if (variableName=="skill") {
				this.skill = (bool[][])value;
				return ;
			}
			if (variableName=="isCorrect") {
				this.isCorrect = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skill' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> SkillMarginal()
		{
			return this.skill_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
